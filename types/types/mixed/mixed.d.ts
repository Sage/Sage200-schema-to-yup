export class YupMixed extends Base {
    init(opts: any): void;
    parentNode: any;
    opts: any;
    entryHandler: any;
    validator: any;
    key: any;
    schema: any;
    properties: any;
    set value(arg: any);
    get value(): any;
    title: any;
    description: any;
    constraints: any;
    format: any;
    type: string;
    mixedConfig: any;
    typeConfig: any;
    errMessages: any;
    constraintsAdded: {};
    base: any;
    get keyPath(): any;
    _keyPath: any;
    calcKeyPath(): string;
    get builder(): any;
    getBase(): any;
    get customBaseValidator(): any;
    getValidator(): any;
    get baseType(): string;
    get validatorInstance(): any;
    configureTypeConfig(): void;
    isRequired(value: any): boolean;
    get mode(): any;
    get disableFlags(): (string | boolean)[];
    get enableFlags(): (string | boolean)[];
    disabledMode(modeName: any): boolean;
    enabledMode(modeName: any): boolean;
    get shouldPreProcessValue(): boolean;
    preProcessedConstraintValue(value: any): any;
    _value: any;
    initHelpers(): void;
    errorMessageHandler: any;
    constraintBuilder: any;
    createConstraintBuilder(typeHandler: any, config?: {}): ConstraintBuilder;
    createErrorMessageHandler(typeHandler: any, config?: {}): ErrorMessageHandler;
    rebind(...methods: any[]): void;
    validateOnCreate(key: any, value: any, opts: any): void;
    get mixedEnabled(): any;
    get typeEnabled(): any[];
    get $typeExtends(): any;
    get configuredTypeEnabled(): any;
    get $typeEnabled(): any;
    get enabled(): any[];
    convertEnabled(): void;
    convertFnFor(name: any): any;
    customConvertFnFor(name: any): any;
    builtInConvertFnFor(name: any): any;
    getConstraints(): any;
    createSchemaEntry(): any;
    convert(): YupMixed;
    apply(fnName: any, ...fnArgs: any[]): YupMixed;
    applyArr(fnName: any, arrValue: any): YupMixed;
    addTrueValueConstraint(propName: any, opts: any): YupMixed;
    addConstraint(propName: any, opts: any): YupMixed;
    addMappedConstraints(): YupMixed;
    addMappedConstraint(key: any): void;
    get constraintsMap(): {
        simple: string[];
        trueValue: string[];
    };
    refValueFor(): YupMixed;
    normalizeValues(values: any): any[];
    get oneOfValues(): any;
    get oneOfAliases(): string[];
    get oneOfAlias(): string;
    oneOf(): YupMixed;
    logDetailed(label: any, idObj: any, ...values: any[]): void;
    get notOneOfValues(): any;
    notOneOf(): YupMixed;
    resolveValues(values: any): any;
    const(): YupMixed;
    normalizeDataRefPath(value: any): any;
    isDataRef(value: any): boolean;
    isConst(value: any): boolean;
    resolveValue(value: any): any;
    validationErrorMessage(msgName: any): any;
    createWhenConditionFor(when: any): any;
    label(): YupMixed;
    when(): YupMixed;
    isType(): YupMixed;
    nullable(): YupMixed;
    message(): any;
    errMessage(errKey?: string): any;
    toValidJSONSchema(): void;
    normalize(): void;
    deNormalize(): void;
    errorMsg(msg: any): void;
    error(name: any, msg: any): void;
    throwError(msg: any): void;
}
export class ConvertYupSchemaError extends Error {
}
import { Base } from "../base";
import { ConstraintBuilder } from "../../constraint-builder";
import { ErrorMessageHandler } from "../../error-message-handler";
